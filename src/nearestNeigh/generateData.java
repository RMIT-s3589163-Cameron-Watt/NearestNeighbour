package nearestNeigh;

import java.util.ArrayList;
import java.util.List;
import java.io.File;
import java.io.PrintWriter;
import java.io.FileNotFoundException;

/* This class aims at generating a number of records in the form of 
 *       id10 restaurant -36.4840417904 144.608559957
 * Then outputting this data to a text file
 * 
 * WARNING This class uses formatted output, so the values of data generated must be selected
 * 			carefully, else change the formatting values to ensure the numbers are printed
 * 			with a reasonable number of decimal places 
 * 
 * This program will generate 12 files, based on a small, medium and large number of records
 * The first will be a small.txt (a smallNoOfRecords sized sample of testData), then 3 more 
 * files derived from this file. The extra 3 files are a small, medium and large number of 
 * add/delete inputs to be used for the python testing script.  
 * 
 * This process will also be repeated for the mediumNoOfRecords and largeNoOfRecords
 * 
 * Each file name below is a variable name, that can be easily edited the naming convention
 * I have used is (smallFileName)-(smallAddDelete).in will generate  small-10.in
 * 
 * This will generate the following files
 * 
 * small.txt, small-10.in, small-25.in, small-100.in
 * medium.txt, medium-10.in, medium-25.in, medium-100.in
 * large.txt, large-10.in, large-25.in, large-100.in
 *  
 * @author Watt, Cameron
 */

public class generateData {
    // identifier
    public String id = null;
    // category  -  Possible categories - RESTAURANT, EDUCATION, HOSPITAL
    public Category cat;
    // latitude or x-coordinate
    public double lat = 0;
    // longitude or y-coordinate
    public double lon = 0;

	// Number of records to be generated
    int smallNoOfRecords =     100;
	int mediumNoOfRecords =  10000;
	int largeNoOfRecords = 1000000;

	// Number of addition/deletions to be generated
	int smallAddDelete = 10;
	int medAddDelete = 25;
	int largeAddDelete = 100;
	
	String smallFileName = "small";
	String mediumFileName = "medium";
	String largeFileName = "large";
	
	// Set the min and max values to be generated by the generator
	double minLat = 130.000000;
	double maxLat = 140.000000;
	double minLon = 150.000000;
	double maxLon = 160.000000;

	List<String> testData = new ArrayList();
	List<String> addList = new ArrayList();
	
	// Declare a output stream variable
    PrintWriter outputStream = null; 

    /* Public constructor for this class. */
    public generateData( boolean generateInputs ) {
    	generateTestData( smallFileName, smallNoOfRecords, generateInputs );
		generateTestData( mediumFileName, mediumNoOfRecords, generateInputs );
		generateTestData( largeFileName, largeNoOfRecords, generateInputs );
    }

	/* Generates a list containing the testData, and then calls generateInputFile
	 * which uses this list to generate the input files for the python test script
	 */
	private void generateTestData( String fileName, int noOfRecords, boolean generateInputs ) {
		testData = generate( noOfRecords );
		
		if ( generateInputs ) {
			generateInputFile( (fileName + "-" + smallAddDelete ), 10, testData );
			generateInputFile( (fileName + "-" + medAddDelete ), 25, testData );
			generateInputFile( (fileName + "-" + largeAddDelete ), 100, testData );
		}

		saveTestDataToFile( fileName, noOfRecords, testData );
	}

	private void saveTestDataToFile( String fileName, int noOfRecords, List testData ) {
		// Open the file to write to
	    try {
	    	outputStream = new PrintWriter(new File(fileName + ".txt"));
	    }  
	    catch (FileNotFoundException e) {
	    	System.out.println("Error creating file " + fileName);
	    }

		for ( int idNo = 0; idNo < noOfRecords; idNo++ ) {
			// Add next line of testData to the test file
			outputStream.printf( "id" + idNo + " " + testData.get(idNo) );
		}

		// Close the outputStream and save the file
		outputStream.close();
	}

	/* Generates the test Input files to be used with the python script */
	private void generateInputFile( String fileName, int noOfInputs, List testData ) {
		// Open the file to write to
	    try {
	    	outputStream = new PrintWriter(new File(fileName + ".in"));
	    }  
	    catch (FileNotFoundException e) {
	    	System.out.println("Error creating file " + fileName);
	    }

		addList = generate( noOfInputs );
		/* This loop is based on the smaller List, and will alternate between
		 * an addition and a deletion, although this is not ideal, it will suit
		 * for our test purposes 
		 */	 
		for ( int idNo = 0; idNo < noOfInputs; idNo++ ) {
			// Add point to delete to input file
			outputStream.printf( "D " + testData.get(idNo) );
			// Add point to add to the input file
			outputStream.printf( "A " + addList.get(idNo) );
		}

		// Close the outputStream and save the file
		outputStream.close();
	}		

	/* Generates a list of testData of size noOfRecords and returns
	 * the list to the calling function
	 */
	private List generate( int noOfRecords ) {
		List<String> testData = new ArrayList();
	    int random = 0;		// Used to determine a category
	    String data = null;
	    String latLon = null;

		for ( int i = 0; i < noOfRecords; i++ ) {
			// generate Category
			random = (int) Math.floor(Math.random() * (3));
			switch ( random ) {
				case 0: {
					cat = Point.parseCat("RESTAURANT");
					break;
				}
				case 1: {
					cat = Point.parseCat("EDUCATION");
					break;
				}
				case 2: {
					cat = Point.parseCat("HOSPITAL");
					break;
				}
			}
			
			// generate lat
			lat = generateRandomDouble( minLat, maxLat );
			
			// generate lon
			lon = generateRandomDouble( minLon, maxLon );
			data = String.format("%10.6f %10.6f %n", lat, lon);  
			testData.add( cat.toString() + data );
			//testData.add( cat.toString() + " %10.6f %10.6f %n", lat, lon );
		}
		return testData;
	}
	
    /* The following code is from
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random
     * This example returns a random number between the specified values. The returned value is no
     * lower than (and may possibly equal) min, and is less than (but not equal to) max.
     */ 
	private double generateRandomDouble( double min, double max ) {
		/* As this function doesn't include the max function by default, we need to increase
		 * the max value to ensure that it is included 
		 */
		max += 1;
		//return Math.floor(Math.random() * (max - min)) + min;
		return Math.random() * (max - min) + min;
	}
}


//Used to run the data generator 
class starter {
	public static void main(String[] args) {
		// Used to turn off the inputFile generation (meaning only 3 files will be generated)
		boolean generateInputs = true;
		generateData newDataSet = new generateData( generateInputs );
	}
}

